-- CUSTOMER TABLE
CREATE TABLE CUSTOMER (
	CUSTOMER_ID INT PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PHONE VARCHAR(20)
);

-- AIRPORTS TABLE
CREATE TABLE AIRPORTS (
	AIRPORT_ID INT PRIMARY KEY AUTO_INCREMENT,
    AIRPORT_NAME VARCHAR(255) NOT NULL,
    CITY VARCHAR(100) NOT NULL,
    IATA_CODE CHAR(3) UNIQUE NOT NULL
);

-- AIRCRAFTS TABLE
CREATE TABLE AIRCRAFTS (
	AIRCRAFT_ID INT PRIMARY KEY AUTO_INCREMENT,
    MODEL VARCHAR(100) NOT NULL,
    TOTAL_SEATS INT NOT NULL CHECK (TOTAL_SEATS > 0)
);

-- SEATS TABLE
CREATE TABLE SEATS (
	SEAT_ID INT PRIMARY KEY AUTO_INCREMENT,
    AIRCRAFT_ID INT NOT NULL,
    SEAT_NUMBER VARCHAR(10) NOT NULL,
    SEAT_CLASS ENUM ('ECONOMY', 'BUSINESS', 'FIRST') NOT NULL,
    PRICE_MULTIPLIER DECIMAL(3, 2) NOT NULL DEFAULT 1.00,
    FOREIGN KEY (AIRCRAFT_ID) REFERENCES AIRCRAFTS (AIRCRAFT_ID),
    UNIQUE KEY UK_AIRCRAFT_SEAT (AIRCRAFT_ID, SEAT_NUMBER)
);

-- FLIGHTS TABLE
CREATE TABLE FLIGHTS (
	FLIGHT_ID INT PRIMARY KEY AUTO_INCREMENT,
    AIRCRAFT_ID INT NOT NULL,
    DEPARTURE_AIRPORT_ID INT NOT NULL,
    ARRIVAL_AIRPORT_ID INT NOT NULL,
    DEPARTURE_DATETIME DATETIME NOT NULL,
    ARRIVAL_DATETIME DATETIME NOT NULL,
    BASE_PRICE DECIMAL(10,2) NOT NULL CHECK (BASE_PRICE > 0),
    AVAILABLE_SEATS INT NOT NULL DEFAULT 0,
	
    FOREIGN KEY (AIRCRAFT_ID) REFERENCES AIRCRAFTS(AIRCRAFT_ID),
    FOREIGN KEY (DEPARTURE_AIRPORT_ID) REFERENCES AIRPORTS(AIRPORT_ID),
    FOREIGN KEY (ARRIVAL_AIRPORT_ID) REFERENCES AIRPORTS(AIRPORT_ID),
    CONSTRAINT CHK_ARRIVAL_AFTER_DEPARTURE CHECK (ARRIVAL_DATETIME > DEPARTURE_DATETIME),
    CONSTRAINT CHK_DIFFERENT_AIRPORTS CHECK (DEPARTURE_AIRPORT_ID != ARRIVAL_AIRPORT_ID)
);

-- BOOKINGS TABLE 
CREATE TABLE BOOKINGS (
	BOOKING_ID INT PRIMARY KEY AUTO_INCREMENT,
    CUSTOMER_ID INT NOT NULL,
    FLIGHT_ID INT NOT NULL,
    BOOKING_DATETIME DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    STATUS ENUM('PENDING', 'CONFIRMED', 'CANCELLED') NOT NULL DEFAULT 'CONFIRMED',
    TOTAL_PRICE DECIMAL(10, 2) NOT NULL DEFAULT 0.00
);

-- BOOKING_DETAILS TABLE
CREATE TABLE BOOKING_DETAILS (
	BOOKING_DETAIL_ID INT PRIMARY KEY AUTO_INCREMENT,
    BOOKING_ID INT NOT NULL,
    SEAT_ID INT NOT NULL,
    SEAT_PRICE DECIMAL(10, 2) NOT NULL,
    
    FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS(BOOKING_ID),
    FOREIGN KEY (SEAT_ID) REFERENCES SEATS(SEAT_ID),
    UNIQUE KEY UK_BOOKED_SEAT_ON_FLIGHT (BOOKING_ID, SEAT_ID)
 );   

-- INSERT SAMPLE FLIGHT AND BOOKING RECORDS (DML)
INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE) VALUES 
('ABHI', 'VATS', 'ABHIVATS@GMAIL.COM', '6579267401'),
('OM', 'MISHRA', 'OMMISHRA@GMAIL.COM', '6579267402'),
('BOB', 'JAMES', 'BOBJAMES@GMAIL.COM', '6579267403');

INSERT INTO AIRPORTS (AIRPORT_NAME, CITY, IATA_CODE) VALUES
('LOS ANGELES INTERNATIONAL', 'LOS ANGELES', 'LAX'),
('BIJU PATTNAIK INTERNATIONAL', 'BHUBANESWAR', 'BBI'),
('PORT BLAIR INTERNATIONAL', 'PORT BLAIR', 'IXZ'),
('HEATHROW AIRPORT', 'LONDON', 'LHR');

INSERT INTO AIRCRAFTS (MODEL, TOTAL_SEATS) VALUES
('BOEING 737-800', 160),
('AIRBUS A380', 500);

-- AIRCRAFT 1(B737-800, 160 SEATS)
INSERT INTO SEATS (AIRCRAFT_ID, SEAT_NUMBER, SEAT_CLASS, PRICE_MULTIPLIER)
SELECT 1, CONCAT(ROW_NUM, COL_CHAR), SEAT_CLASS, MULTIPLIER FROM
(
	SELECT 1 AS AIRCRAFT_ID, GENERATE_SERIES AS ROW_NUM, COL_CHAR,
		CASE
			WHEN GENERATE_SERIES <= 5 THEN 'BUSINESS'
            ELSE 'ECONOMY'
		END AS SEAT_CLASS,
        CASE
			WHEN GENERATE_SERIES <= 5 THEN 2.00
            ELSE 1.00
		END AS MULTIPLIER
	FROM (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10)
    AS T1(GENERATE_SERIES), (SELECT 'A' UNION ALL SELECT 'B' UNION ALL SELECT 'C' UNION ALL SELECT 'D' UNION ALL SELECT 'E' UNION ALL SELECT 'F') AS T2(COL_CHAR)
) AS SEATS_DATA
WHERE ROW_NUM * 6 <= 160;

INSERT INTO FLIGHTS (AIRCRAFT_ID, DEPARTURE_AIRPORT_ID, ARRIVAL_AIRPORT_ID, DEPARTURE_DATETIME, ARRIVAL_DATETIME, BASE_PRICE) VALUES
(1, 2, 1, '2025-11-15 08:00:00', '2025-11-15 11:30:00', 150.00),
(1, 1, 3, '2025-11-20 14:00:00', '2025-11-21 06:00:00', 350.00),
(2, 3, 4, '2025-12-01 10:00:00', '2025-12-02 00:00:00', 500.00);

INSERT INTO BOOKINGS (CUSTOMER_ID, FLIGHT_ID, STATUS, TOTAL_PRICE) VALUES (1, 1, 'CONFIRMED', 0.00);
SET @BOOKING1_ID = LAST_INSERT_ID();

INSERT INTO BOOKING_DETAILS (BOOKING_ID, SEAT_ID, SEAT_PRICE)
SELECT @BOOKING1_ID, SEAT_ID, (SELECT BASE_PRICE * PRICE_MULTIPLIER FROM FIGHTS F JOIN SEATS S ON F.AIRCRAFT_ID = S.AIRCRAFT_ID WHERE F.FLIGHT_ID = 1 AND S.SEAT_NUMBER = '6A' LIMIT 1)
FROM SEATS WHERE AIRCRAFT_ID = 1 AND SEAT_NUMBER = '6A';

INSERT INTO BOOKING_DETAILS (BOOKING_ID, SEAT_ID, SEAT_PRICE)
SELECT @BOOKING1_ID, SEAT_ID, (SELECT BASE_PRICE * PRICE_MULTIPLIER FROM FIGHTS F JOIN SEATS S ON F.AIRCRAFT_ID = S.AIRCRAFT_ID WHERE F.FLIGHT_ID = 1 AND S.SEAT_NUMBER = '1A' LIMIT 1)
FROM SEATS WHERE AIRCRAFT_ID = 1 AND SEAT_NUMBER = '1A';

INSERT INTO BOOKINGS (CUSTOMER_ID, FLIGHT_ID, STATUS, TOTAL_PRICE) VALUES (2, 2, 'CONFIRMED', 0.00);
SET @BOOKING2_ID = LAST_INSERT_ID();

INSERT INTO BOOKING_DETAILS (BOOKING_ID, SEAT_ID, SEAT_PRICE)
SELECT @BOOKING2_ID, SEAT_ID, (SELECT BASE_PRICE * PRICE_MULTIPLIER FROM FIGHTS F JOIN SEATS S ON F.AIRCRAFT_ID = S.AIRCRAFT_ID WHERE F.FLIGHT_ID = 2 AND S.SEAT_NUMBER = '7C' LIMIT 1)
FROM SEATS WHERE AIRCRAFT_ID = 1 AND SEAT_NUMBER = '7C';

INSERT INTO BOOKINGS (CUSTOMER_ID, FLIGHT_ID, STATUS, TOTAL_PRICE) VALUES (3, 1, 'PENDING', 0.00);
SET @BOOKING3_ID = LAST_INSERT_ID();

INSERT INTO BOOKING_DETAILS (BOOKING_ID, SEAT_ID, SEAT_PRICE)
SELECT @BOOKING3_ID, SEAT_ID, (SELECT BASE_PRICE * PRICE_MULTIPLIER FROM FIGHTS F JOIN SEATS S ON F.AIRCRAFT_ID = S.AIRCRAFT_ID WHERE F.FLIGHT_ID = 1 AND S.SEAT_NUMBER = '8D' LIMIT 1)
FROM SEATS WHERE AIRCRAFT_ID = 1 AND SEAT_NUMBER = '8D';

-- TRIGGERS FOR BOOKING UPDATES AND CANCELLATIONS (TCL)
DELIMITER //
CREATE TRIGGER TR_SET_INITIAL_SEATS_BEFORE_INSERT
BEFORE INSERT ON FLIGHTS
FOR EACH ROW
BEGIN
	SELECT TOTAL_SEATS INTO NEW.AVAILABLE_SEATS
    FROM AIRCRAFTS 
    WHERE AIRCRAFT_ID = NEW.AIRCRAFT_ID;
END;
//
DELIMITER ;

UPDATE FLIGHTS F
SET AVAILABLE_SEATS = (
	SELECT A.TOTAL_SEATS - COALESCE(COUNT(BD.BOOKING_DETAIL_ID), 0)
    FROM AIRCRAFTS A 
    LEFT JOIN SEATS S ON A.AIRCRAFT_ID = S.AIRCRAFT_ID
    LEFT JOIN BOOKING_DETAILS BD ON S.SEAT_ID = BD.SEAT_ID
    LEFT JOIN BOOKINGS B ON BD.BOOKING_ID = B.BOOKING_ID AND B.STATUS = 'CONFIRMED'
    WHERE A.AIRCRAFT_ID = F.AIRCRAFT_ID AND B.FLIGHT_ID = F.FLIGHT_ID
    GROUP BY A.TOTAL_SEATS
);

DELIMITER //
CREATE TRIGGER TR_UPDATE_SEATS_AND_PRICE_AFTER_DETAILS_INSERT
AFTER INSERT ON BOOKING_DETAILS
FOR EACH ROW
BEGIN
	DECLARE BOOK_STATUS ENUM('PENDING', 'CONFIRMED', 'CANCELLED');
    DECLARE FLIGHT_ID_VAL INT;
    
	UPDATE BOOKINGS
	SET TOTAL_PRICE = TOTAL_PRICE + NEW.SEAT_PRICE
	WHERE BOOKING_ID = NEW.BOOKING_ID;
    
	SELECT STATUS, FLIGHT_ID INTO BOOK_STATUS, FLIGHT_ID_VAL
    FROM BOOKINGS
    WHERE BOOKING_ID = NEW.BOOKING_ID;
    
    IF BOOK_STATUS = 'CONFIRMED' THEN 
		UPDATE FLIGHTS
        SET AVAILABLE_SEATS = AVAILABLE_SEATS - 1
        WHERE FLIGHT_ID = FLIGHT_ID_VAL;
	END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER TR_UPDATE_SEATS_AFTER_BOOKING_STATUS_UPDATE
AFTER UPDATE ON BOOKINGS
FOR EACH ROW
BEGIN
	DECLARE NUM_SEATS INT;
    
    IF OLD.STATUS != 'CONFIRMED' AND NEW.STATUS = 'CONFIRMED' THEN 
		SELECT COUNT(*) INTO NUM_SEATS FROM BOOKING_DETAILS WHERE BOOKING_ID = NEW.BOOKING_ID;
        
        UPDATE FLIGHTS
        SET AVAILABLE_SEATS = AVAILABLE_SEATS - NUM_SEATS
        WHERE FLIGHT_ID = NEW.FLIGHT_ID;
        
	ELSEIF OLD.STATUS = 'CONFIRMED' AND NEW.STATUS != 'CONFIRMED' THEN
		SELECT COUNT(*) INTO NUM_SEATS FROM BOOKING_DETAILS WHERE BOOKING_ID = NEW.BOOKING_ID;
        
        UPDATE FLIGHTS
        SET AVAILABLE_SEATS = AVAILABLE_SEATS + NUM_SEATS
        WHERE FLIGHT_ID = NEW.FLIGHT_ID;
	END IF;
END;
//
DELIMITER ;

-- FLIGHT AVAILABILITY VIEWS
CREATE VIEW V_FLIGHT_SEARCH AS 
SELECT
	F.FLIGHT_ID,
    A_DEP.IATA_CODE AS DEPARTURE_IATA,
    A_DEP.CITY AS DEPARTURE_CITY,
    A_ARR.IATA_CODE AS ARRIVAL_IATA,
    A_ARR.CITY AS ARRIVAL_CITY,
    F.DEPARTURE_DATETIME,
    F.ARRIVAL_DATETIME,
    AC.MODEL AS AIRCRAFT_MODEL,
    F.BASE_PRICE,
    F.AVAILABLE_SEATS
FROM FLIGHTS F
JOIN AIRPORTS A_DEP ON F.DEPARTURE_AIRPORT_ID = A_DEP.AIRPORT_ID
JOIN AIRPORTS A_ARR ON F.ARRIVAL_AIRPORT_ID = A_ARR.AIRPORT_ID
JOIN AIRCRAFTS AC ON F.AIRCRAFT_ID = AC.AIRCRAFT_ID
ORDER BY F.DEPARTURE_DATETIME;

CREATE VIEW V_AVAILABLE_SEATS AS 
SELECT
	F.FLIGHT_ID,
    F.DEPARTURE_DATETIME,
    F.DEPARTURE_AIRPORT_ID,
    AC.AIRCRAFT_ID,
    S.SEAT_ID,
    S.SEAT_NUMBER,
    S.SEAT_CLASS,
    F.BASE_PRICE * S.PRICE_MULTIPLIER AS CALCULATED_PRICE
FROM FLIGHTS F
JOIN AIRCRAFTS AC ON F.AIRCRAFT_ID = AC.AIRCRAFT_ID
JOIN SEATS S ON AC.AIRCRAFT_ID = S.AIRCRAFT_ID
WHERE S.SEAT_ID NOT IN (
	SELECT BD.SEAT_ID FROM BOOKING_DETAILS BD JOIN BOOKINGS B ON BD.BOOKING_ID = B.BOOKING_ID WHERE B.FLIGHT_ID = F.FLIGHT_ID AND B.STATUS = 'CONFIRMED'
);

-- EXAMPLE QUERIES
SELECT * FROM V_FLIGHT_SEARCH WHERE DEPARTURE_IATA = 'JFK' AND ARRIVAL_IATA = 'LAX' AND AVAILABLE_SEATS > 0;
SELECT SEAT_NUMBER, CALCULATED_PRICE FROM V_AVAILABLE_SEATS WHERE FLIGHT_ID = 1 AND SEAT_CLASS = 'ECONOMY';
-- ```sql
SELECT 
	B.BOOKING_ID,
    C.FIRST_NAME,
    C.LAST_NAME,
    B.STATUS AS BOOKING_STATUS,
    B.TOTAL_PRICE,
    F.FLIGHT_ID,
    DEP.IATA_CODE AS DEPARTURE_AIRPORT,
    ARR.IATA_CODE AS ARRIVAL_AIRPORT,
    F.DEPARTURE_DATETIME,
    GROUP_CONCAT(S.SEAT_NUMBER SEPARATOR ',') AS BOOKED_SEATS
FROM BOOKINGS B 
JOIN CUSTOMERS C ON B.CUSTOMER_ID = C.CUSTOMER_ID
JOIN FLIGHTS F ON B.FLIGHT_ID = F.FLIGHT_ID
JOIN AIRPORTS DEP ON F.DEPARTURE_AIRPORT_ID = DEP.AIRPORT_ID
JOIN AIRPORTS ARR ON F.ARRIVAL_AIRPORT_ID = ARR.AIRPORT_ID
JOIN BOOKING_DETAILS BD ON B.BOOKING_ID = BD.BOOKING_ID
JOIN SEATS S ON BD.SEAT_ID = S.SEAT_ID
WHERE C.EMAIL = 'ALICE.J@EXAMPLE.COM'
GROUP BY B.BOOKING_ID, C.FIRST_NAME, C.LAST_NAME, B.STATUS, B.TOTAL_PRICE, F.FLIGHT_ID, DEP.IATA_CODE, ARR.IATA_CODE, F.DEPARTURE_DATETIME
ORDER BY F.DEPARTURE_DATETIME DESC;

SELECT S.SEAT_NUMBER, B.BOOKING_ID, C.EMAIL AS CUSTOMER_EMAIL 
FROM BOOKING_DETAILS BD
JOIN BOOKING B ON BD.BOOKING_ID = B.BOOKING_ID
JOIN CUSTOMERS C ON B.CUSTOMER_ID = C.CUSTOMER_ID
JOIN SEATS S ON BD.SEAT_ID = S.SEAT_ID
WHERE B.FLIGHT_ID = 1 AND B.STATUS = 'PENDING';
